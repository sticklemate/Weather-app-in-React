{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","id","role","React","Component","Form","className","datatest-id","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","temperature","humidity","description","error","API_KEY","country","App","state","undefined","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","main","valNum","parseFloat","temp","Math","floor","temperatureConverter","console","log","setState","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAqBeA,E,iLAdf,OACA,6BAEA,uDAA4B,0BAAMC,GAAG,gBAAgBC,KAAK,OAA9B,WAC5B,uBAAGD,GAAG,cAAN,oD,GAToBE,IAAMC,WCwBXC,E,iLApBf,OACA,yBAAKC,UAAU,gBACf,0BAAMC,cAAY,OAAOC,SAAUC,KAAKC,MAAMC,YAE1C,0BAAML,UAAU,SAAQ,2BAAOA,UAAU,aAAaM,KAAK,OAAOC,KAAK,OAAOC,YAAY,yBAC1F,gCAGA,2BAAG,sD,GAZYX,IAAMC,WCyCVW,E,iLAnCf,OAAQ,yBAAKT,UAAU,WAIlBG,KAAKC,MAAMM,MAAQ,yBAAKV,UAAU,eAAf,SAAoCG,KAAKC,MAAMM,KACnE,2BAAG,uBAAGV,UAAU,wBAIfG,KAAKC,MAAMM,MAAQ,yBAAKV,UAAU,eAAf,wBAAmDG,KAAKC,MAAMO,YAA9D,QAAgF,mCACnGR,KAAKC,MAAMO,YAAa,IAAM,2BAAG,uBAAGX,UAAU,kCAC9CG,KAAKC,MAAMO,aAAc,IAAM,2BAAG,uBAAGX,UAAU,oCAI/CG,KAAKC,MAAMM,MAAQ,yBAAKV,UAAU,eAAf,aAAwCG,KAAKC,MAAMQ,SAAnD,KACpB,2BAAG,uBAAGZ,UAAU,wBAIfG,KAAKC,MAAMM,MAAQ,yBAAKV,UAAU,eAAf,eAA0CG,KAAKC,MAAMS,YACzE,2BAAG,uBAAGb,UAAU,8BAIfG,KAAKC,MAAMU,OAAS,uBAAGnB,GAAG,aAAN,IAAoBQ,KAAKC,MAAMU,Y,GA9BlCjB,IAAMC,WCItBiB,EAAQ,mCACRC,EAAQ,MAmGCC,E,2MA9FPC,MAAQ,CAERR,UAAMS,EACNR,iBAAaQ,EACbP,cAAUO,EACVN,iBAAaM,EACbL,WAAOK,G,EAKXd,WAAa,SAAOe,GAAP,mBAAAC,EAAAC,OAAA,uDACbF,EAAEG,iBAEIb,EAAOU,EAAEI,OAAOC,SAASf,KAAKgB,MAHvB,WAAAL,EAAA,MAOUM,MAAM,oDAAD,OAAqDjB,EAArD,YAA6DM,EAA7D,kBAA8ED,KAP7F,cAOPa,EAPO,kBAAAP,EAAA,MASMO,EAASC,QATf,QASPC,EATO,QAeDC,MAGR,SAA8BC,GAC5BA,EAASC,WAAWD,GACpBF,EAAKC,KAAKG,KAAKC,KAAKC,MAAMJ,EAAO,QAJjCK,CAAqBP,EAAKC,KAAKG,MAW5BxB,GAAQoB,EAAKC,MAEZO,QAAQC,IAAIT,GAEZ,EAAKU,SAAS,CAGZ7B,YAAYmB,EAAKC,KAAKG,KACtBxB,KAAKoB,EAAKvB,KACVK,SAASkB,EAAKC,KAAKnB,SACnBC,YAAYiB,EAAKW,QAAQ,GAAG5B,YAC5BC,MAAM,MAQR,EAAK0B,SAAS,CACZ7B,iBAAYQ,EACZT,KAAKoB,EAAKX,UACVP,cAASO,EACTN,iBAAYM,EACZL,MAAM,oCAnDL,uC,wEA6Df,OAEE,6BAEE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMT,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACAM,YAAaR,KAAKe,MAAMP,YACxBD,KAAMP,KAAKe,MAAMR,KACjBE,SAAUT,KAAKe,MAAMN,SACrBC,YAAaV,KAAKe,MAAML,YACxBC,MAAOX,KAAKe,MAAMJ,a,GAtFNjB,IAAMC,WCEJ4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c3c558ae.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Title extends React.Component {\r\n\r\n\r\nrender(){\r\n\r\nreturn(\r\n<div>\r\n\r\n<h2>Weather app - Australia <span id=\"weather-emoji\" role=\"img\">&#9925;</span></h2>\r\n<p id=\"title-para\">Find out temperature conditions and more...</p>\r\n</div>\r\n);\r\n\r\n}\r\n\r\n\r\n}\r\n\r\n\r\nexport default Title;","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n\r\nrender(){\r\n\r\nreturn (\r\n<div className=\"weather-form\">\r\n<form datatest-id=\"form\" onSubmit={this.props.getWeather}>\r\n\r\n    <span className=\"input\"><input className=\"input-city\" type=\"text\" name=\"city\" placeholder=\" Enter the City name\"></input>\r\n    <span></span>\r\n    </span>\r\n    \r\n    <p><button >Get Weather</button></p>\r\n\r\n</form>\r\n</div>\r\n\r\n\r\n);\r\n\r\n}\r\n\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\n\r\nclass Weather extends React.Component {\r\n\r\nrender(){\r\n\r\n\r\nreturn (<div className=\"wrapper\">\r\n    \r\n    \r\n     {/* City */}\r\n    {this.props.city && <div className=\"weather-box\">City: {this.props.city}\r\n    <p><i className=\"fas fa-city fa-3x\"></i></p>\r\n    </div>}\r\n\r\n    {/* Temperature */}\r\n    {this.props.city && <div className=\"weather-box\">Current temperature: {this.props.temperature} &deg;<span>C</span>\r\n    {this.props.temperature <30 && <p><i className=\"fas fa-temperature-low fa-3x\"></i></p>}\r\n    {this.props.temperature >=30 && <p><i className=\"fas fa-temperature-high fa-3x\"></i></p>}\r\n    </div>}\r\n\r\n    {/* Humidity */}\r\n    {this.props.city && <div className=\"weather-box\">Humidity: {this.props.humidity} %\r\n    <p><i className=\"fas fa-tint fa-3x\"></i></p>\r\n    </div>}\r\n\r\n    {/* Conditions */}\r\n    {this.props.city && <div className=\"weather-box\">Conditions: {this.props.description}\r\n    <p><i className=\"fas fa-cloud-moon fa-3x\"></i></p>\r\n    </div>}\r\n\r\n    {/* Error message */}\r\n    {this.props.error && <p id=\"error-msg\"> {this.props.error}</p>}\r\n\r\n</div>);\r\n\r\n\r\n}\r\n\r\n}\r\n\r\n\r\nexport default Weather;","/*jshint esversion: 6 */\nimport React from \"react\";\nimport Title from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\n\nconst API_KEY=\"7e070ed26fa13b00fb40a9901670b645\";\nconst country=\"AUS\";\n\nclass App extends React.Component {\n\n        //Use of state Management for weather attributes\n        state = {\n\n        city: undefined,\n        temperature: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: undefined\n        \n        }\n\n    //Function  call on button click\n    getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n\n    //Make API call to openweather.com with provided API keys to get the latest weather data\n    //Or Alternatively use the JSON file provided\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n\n    const data = await api_call.json();\n    \n\n\n        //Convert temperature from Kelvin to Celsius\n        \n        if(data.main){\n          temperatureConverter(data.main.temp);\n          \n        function temperatureConverter(valNum) {\n          valNum = parseFloat(valNum);\n          data.main.temp=Math.floor(valNum-273.15);\n        }\n      }\n      \n\n\n          //Set states for all weather data if valid City is provided otherwise default to undefined\n          if(city && data.main)\n          {\n              console.log(data);\n\n              this.setState({\n                \n                \n                temperature:data.main.temp, \n                city:data.name,\n                humidity:data.main.humidity,\n                description:data.weather[0].description,\n                error:\"\"\n                \n              });\n              \n          }\n\n          //If no valid city is provided as Input\n          else {\n              this.setState({\n                temperature:undefined, \n                city:data.undefined,\n                humidity:undefined,\n                description:undefined,\n                error:\"Please enter a valid City name!\"\n              \n              });\n\n          }\n          }\n\nrender(){\n\n  //Pasing props to custom components\n  return ( \n\n    <div>\n\n      <Title />\n      <Form getWeather={this.getWeather} />\n      <Weather \n      temperature={this.state.temperature}\n      city={this.state.city}\n      humidity={this.state.humidity}\n      description={this.state.description}\n      error={this.state.error}\n      />\n    </div>\n  \n      );\n}\n\n};\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*jshint esversion: 6 */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './App.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}